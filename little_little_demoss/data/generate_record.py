"""
This is used for generate TFRecord, if you want to using this Util, You need to do the following preprocessing steps:
1. Resize all the image to same size.
2. Generate the train_txt file and the test_txt file.The file like that
	img1_relative_path label1
	img2_relative_path label2
	...
3. You need to make sure "data_dir/img1_relative_path" is the absolute path of img1
4. The Funciton read_data is a example to read the tfrecord data
attention:
"""
import tensorflow as tf
import os
from skimage.transform import resize
import argparse
import progressbar
import threading
import numpy as np
from PIL import Image


class Img(object):
    def __init__(self, img_path, label):
        self.img_path = img_path
        self.label = label


def _int64_feature(value):
    return tf.train.Feature(int64_list=tf.train.Int64List(value=[value]))


def _bytes_feature(value):
    return tf.train.Feature(bytes_list=tf.train.BytesList(value=[value]))


def convert_to(img_list, target_dir, shape=(224, 224), name="train"):
    """
    build records file
    :param img_list: a list of Img objects generated by 'parse_txt_file'
    :param target_dir: the target directory that you want to save the records file
    :param name: using to specify the record file's name. the generated file name is 'name.tfrecords'
    :return: Nothing
    """
    if not isinstance(img_list, list):
        raise ValueError("img_list must be a list")

    total_num = len(img_list)

    ####
    widgets = ["processing: ", progressbar.Percentage(),
               " ", progressbar.ETA(),
               " ", progressbar.FileTransferSpeed(),
               ]
    bar = progressbar.ProgressBar(widgets=widgets, max_value=total_num).start()
    ####


    filename = os.path.join(target_dir, name + '.tfrecords')
    print('Writing', filename)
    writer = tf.python_io.TFRecordWriter(filename)

    permute = np.arange(0, len(img_list))
    np.random.shuffle(permute)
    target_height, target_width = shape
    for i, idx in enumerate(permute):
        bar.update(i)
        img = img_list[idx]

        img_data = resize(np.array(Image.open(img.img_path)),
                          output_shape=(target_height, target_width)
                          , preserve_range=True).astype(np.uint8)
        img_data_raw = img_data.tostring()
        example = tf.train.Example(features=tf.train.Features(feature={
            'label': _int64_feature(int(img.label)),
            'image_raw': _bytes_feature(img_data_raw)}))
        writer.write(example.SerializeToString())
    writer.close()
    bar.finish()
    print("done")


def parse_txt_file(file_name, data_dir):
    """
    using txt file and data root dir to generate a list of Img object using to build records
    :param file_name: train_txt file name or test_txt file name
    :param data_dir: data root dir, using to generate the absolute path of the image
    :return: a list of Img objects
    """
    imgs = []
    with open(file_name, mode="r") as file:
        try:
            for line in file:
                img_label = line.split(" ")

                img_path = os.path.join(data_dir, img_label[0])
                label = int(img_label[1])
                imgs.append(Img(img_path, label))
        except KeyboardInterrupt as e:
            file.close()
    return imgs


def main(args):
    train_imgs = parse_txt_file(args.train_txt, args.data_dir)
    test_imgs = parse_txt_file(args.test_txt, args.data_dir)
    thread_pool = []
    num_sample_in_one_record = 10000
    num_train_records = len(train_imgs) // num_sample_in_one_record
    np.random.shuffle(train_imgs)
    for i in range(num_train_records):
        begin = i * num_sample_in_one_record
        if begin > len(train_imgs):
            break
        end = min(len(train_imgs), (i + 1) * num_sample_in_one_record)
        thread_pool.append(
            threading.Thread(target=convert_to, args=(train_imgs[begin:end],
                                                      args.target_dir, (256, 128), "train_%d" % i)))

    thread_pool.append(
        threading.Thread(target=convert_to, args=(test_imgs, args.target_dir, (256, 128), "test")))
    for thread in thread_pool:
        thread.start()
    for thread in thread_pool:
        thread.join()


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Utils to build TF records")
    parser.add_argument("--data_dir",
                        default="/media/fanyang/workspace/DataSet/MARS/bbox_train",
                        help="the data root dir")
    parser.add_argument("--train_txt", default="train.txt", help="train_txt file")
    parser.add_argument("--test_txt", default="test.txt", help="test txt file")
    parser.add_argument("--target_dir",
                        default="/media/fanyang/workspace/DataSet/MARS/",
                        help="target dir")
    args = parser.parse_args()
    if args.data_dir == "" or args.train_txt == "" or args.test_txt == "" or args.target_dir == "":
        raise ValueError("you must specify --data_dir, --train_txt, --test_txt, --target_dir")
    main(args)
